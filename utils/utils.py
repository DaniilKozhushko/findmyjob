import random
import pdfplumber
from docx import Document
import re

# 1. –î–æ–ª–∂–Ω–æ—Å—Ç–∏ IT
positions = [
    "Data Engineer",
    "Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "Java-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "Fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "DevOps-–∏–Ω–∂–µ–Ω–µ—Ä",
    "QA-–∏–Ω–∂–µ–Ω–µ—Ä",
    "SDET",
    "Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "Mobile-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "BI-–∞–Ω–∞–ª–∏—Ç–∏–∫",
    "Data Scientist",
    "ML-–∏–Ω–∂–µ–Ω–µ—Ä",
    "Cloud Engineer",
    "Security Engineer",
    "System Administrator",
    "Database Administrator",
    "Software Architect",
    "Game Developer",
    "UI/UX Designer",
    "Web Designer",
    "Product Owner",
    "Scrum Master",
    "Technical Support Engineer",
    "Network Engineer",
    "Embedded Developer",
    "IT Project Manager",
    "Site Reliability Engineer (SRE)"
]

# 2. –§–æ—Ä–º–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
work_formats = [
    "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å (Full-time)",
    "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å (Part-time)",
    "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (Remote)",
    "–ì–∏–±—Ä–∏–¥ (Hybrid)",
    "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞ (Internship)",
    "–ö–æ–Ω—Ç—Ä–∞–∫—Ç (Contract)",
    "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (Project-based)",
    "–§—Ä–∏–ª–∞–Ω—Å (Freelance)",
    "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (Temporary)",
    "–û–±—É—á–µ–Ω–∏–µ + —Ä–∞–±–æ—Ç–∞ (Trainee/Apprentice)"
]

# 3. –ö–æ–º–ø–∞–Ω–∏–∏
companies = [
    "TechCorp",
    "DataInc",
    "CloudSolutions",
    "AI Labs",
    "DevStudio",
    "WebFactory",
    "CyberSystems",
    "FutureTech",
    "SoftWareHouse",
    "NextGen IT"
]

# 4. –ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
skills = [
    "Python",
    "Java",
    "SQL",
    "Docker",
    "Kubernetes",
    "AWS",
    "Linux",
    "Git",
    "REST API",
    "Spark"
]

# 5. –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á
tasks = [
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ü–û",
    "–°–æ–∑–¥–∞–Ω–∏–µ ETL-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ CI/CD –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
    "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
]

# 6. –®—É—Ç–æ—á–Ω—ã–µ –±–æ–Ω—É—Å—ã
fun_bonuses = [
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ 2 –ø–∞—á–∫–∏ —Ä–∏—Å–∞ –≤ –º–µ—Å—è—Ü üçö",
    "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Pornhub –Ω–∞ –≥–æ–¥ –ø—Ä–∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ üçø",
    "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ ‚òï",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–∏—Ü—Ü–∞ –Ω–∞ –æ–±–µ–¥ üçï",
    "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ –Ω–æ—Å–∫–æ–≤ —Å –º–µ–º–∞–º–∏ üß¶",
    "–õ–∏—á–Ω—ã–π –∫–∞–∫—Ç—É—Å –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ üåµ",
    "–ö—Ä—É–∂–∫–∞ —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º –∏ —Å–º–µ—à–Ω–æ–π –Ω–∞–¥–ø–∏—Å—å—é üèÜ",
    "–°–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –æ—Ç–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü üèñÔ∏è",
    "VIP-–¥–æ—Å—Ç—É–ø –∫ –æ—Ñ–∏—Å–Ω–æ–º—É —Å—Ç–æ–ª—É —Å –º–∞—Å—Å–∞–∂–µ–º üí∫",
    "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –∫–æ—à–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ üê±"
]

# 7. –®—É—Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
salary_descriptions = [
    "–î–æ—Å—Ç–æ–π–Ω–∞—è üí∞",
    "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ü§ë",
    "–í–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç ü§∑‚Äç‚ôÇÔ∏è",
    "–ú–∏—Å–∫–∞ —Ä–∏—Å–∞ –≤ –º–µ—Å—è—Ü üçö",
    "–ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ üòé",
    "–û–ø–ª–∞—Ç–∞ –≤ –º–æ–Ω–µ—Ç–∫–∞—Ö –∏–∑ —à–æ–∫–æ–ª–∞–¥–∞ üç´",
    "–ó–∞ —Å—Ç–∞—Ä–∞–Ω–∏—è ‚Äî –ø—è—Ç—ë—Ä–∫–∞ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ ‚≠ê",
    "–í –≤–∏–¥–µ –±–æ–Ω—É—Å–æ–≤ ‚Äî –Ω–æ—Å–∫–∏ —Å –º–µ–º–∞–º–∏ üß¶",
    "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ñ–µ ‚òï"
]

def return_vacancies() -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list —Å —Ç—Ä–µ–º—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.

    :return: —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    """

    vacancies = []

    for _ in range(3):
        skills_text = ", ".join(random.sample(skills, 3))
        tasks_text = "\n".join(f"- {t}" for t in random.sample(tasks, 4))
        text = f"""
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{random.choice(companies)}</b>
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {random.choice(positions)}
üïí –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {random.choice(work_formats)}
üõ† –ù–∞–≤—ã–∫–∏: <i>{skills_text}</i>
üìå –ë—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏:
{tasks_text}
üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {random.choice(salary_descriptions)}
üéÅ –ë–æ–Ω—É—Å: {random.choice(fun_bonuses)}

–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è: <a href="https://t.me/ZlayaMarmeladka">—Å–≤—è–∑–∞—Ç—å—Å—è –≤ telegram</a>
"""
        vacancies.append(text)

    return vacancies

def extract_text_from_pdf(file_path: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç PDF —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

    :param file_path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    :return: str —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞
    """

    text = ""
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text.strip()

def extract_text_from_docx(file_path: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç DOCX —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.

    :param file_path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
    :return: str —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞
    """

    doc = Document(file_path)
    text = "\n".join([paragraph.text for paragraph in doc.paragraphs if paragraph.text.strip()])
    return text.strip()

programming_languages = [
    "Python", "Java", "C++", "C#", "Go", "JavaScript", "TypeScript", "Ruby",
    "PHP", "Swift", "Kotlin", "Rust", "Scala", "Perl", "R", "MATLAB",
    "SQL", "PL/SQL", "Bash", "Shell", "Dart", "Objective-C", "Groovy"
]

web_technologies = [
    "HTML", "CSS", "Sass", "Less", "React", "Vue.js", "Angular", "Django",
    "Flask", "FastAPI", "Spring", "Node.js", "Express", "Next.js",
    "Nuxt.js", "GraphQL", "REST API", "SOAP", "Bootstrap", "jQuery"
]

databases = [
    "PostgreSQL", "MySQL", "MongoDB", "Redis", "SQLite", "Oracle", "MS SQL Server",
    "Cassandra", "Elasticsearch", "MariaDB", "Firebase", "DynamoDB", "Neo4j"
]

devops_skills = [
    "Docker", "Kubernetes", "Terraform", "Ansible", "Jenkins", "GitLab CI",
    "CircleCI", "Travis CI", "AWS", "Azure", "GCP", "Helm", "Prometheus",
    "Grafana", "Linux", "Ubuntu", "Debian", "CentOS", "CI/CD", "Git", "SVN"
]

data_skills = [
    "Pandas", "NumPy", "SciPy", "Scikit-learn", "TensorFlow", "Keras",
    "PyTorch", "LightGBM", "XGBoost", "OpenCV", "Matplotlib", "Seaborn",
    "Plotly", "Power BI", "Tableau", "ETL", "Airflow", "Kafka", "Spark",
    "Hadoop", "BigQuery", "Data Engineering", "Data Analysis", "Machine Learning",
    "Deep Learning", "NLP", "Computer Vision", "SQL", "NoSQL"
]

soft_skills = [
    "Agile", "Scrum", "Kanban", "TDD", "BDD", "Problem Solving", "Teamwork",
    "Communication", "Time Management", "Leadership", "Critical Thinking",
    "Mentoring", "Planning", "Project Management", "Adaptability"
]

mobile_ui_skills = [
    "Android", "iOS", "React Native", "Flutter", "Unity", "Unreal Engine",
    "Figma", "Sketch", "Adobe XD", "UI/UX Design", "Responsive Design"
]

security_skills = [
    "Cybersecurity", "Penetration Testing", "OWASP", "Network Security",
    "Firewalls", "VPN", "TLS/SSL", "Cryptography", "Linux Security"
]

all_skills = (
    programming_languages +
    web_technologies +
    databases +
    devops_skills +
    data_skills +
    soft_skills +
    mobile_ui_skills +
    security_skills
)

def extract_skills(text: str) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ.

    :param text: —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
    :return: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤)
    """

    key_skills = []

    for skill in all_skills:
        if re.search(rf"\b{re.escape(skill)}\b", text, re.IGNORECASE):
            key_skills.append(skill)
    return key_skills