from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
import bot.keyboards.inline as ikb
import bot.keyboards.reply as rkb
from utils.utils import return_vacancies, extract_text_from_pdf, extract_text_from_docx
from utils.async_utils import async_http
from collections import defaultdict

router = Router()

# –∫–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–πüëãüèª
–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É!

/resume - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ä–µ–∑—é–º–µ –∏ —è –ø–æ–¥—Å–∫–∞–∂—É —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.
/search - –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤–º–µ—Å—Ç–µ —Ä–µ—à–∏–º –∫—É–¥–∞ –ª—É—á—à–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.
""", reply_markup=rkb.start())

class Resume(StatesGroup):
    sending_resume = State()

# –∫–æ–º–∞–Ω–¥–∞ /resume
@router.message(F.text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ")
@router.message(Command("resume"))
async def resume_command(message: Message, state: FSMContext):
    # –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    await state.set_state(Resume.sending_resume)

    await message.answer("""‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX –∏ —è –≤—ã–≤–µ–¥—É –µ–≥–æ —Ç–µ–∫—Å—Ç.""")

# receiving a request from a user
@router.message(Resume.sending_resume)
async def sending_resume_state(message: Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∞–π–ª
    if not message.document:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Ç–≤–æ–µ–≥–æ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ DOCX")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    file_name = message.document.file_name.lower()
    if not (file_name.endswith(".pdf") or file_name.endswith(".docx")):
        await message.reply("–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ PDF –∏–ª–∏ DOCX")
        return

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    file_name = message.document.file_name
    await message.answer(f"–§–∞–π–ª <b><i>{file_name.rsplit(".", 1)[0]}</i></b> –ø–æ–ª—É—á–µ–Ω!")
    file = await message.bot.get_file(message.document.file_id)
    file_path = file.file_path

    # c–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    destination = f"resumes/{file_name}"
    await message.bot.download_file(file_path, destination)

    if file_name.lower().endswith(".pdf"):
        text = extract_text_from_pdf(destination)
    else:
        text = extract_text_from_docx(destination)

    if not text or text.strip() == "":
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç.")
        return

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await state.update_data(user_resume_text=text)

    await message.reply(text=text, parse_mode=None)
    await message.answer(text="–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Ç–≤–æ—ë–º —Ä–µ–∑—é–º–µ?", reply_markup=ikb.key_skills())

@router.callback_query(F.data == "yes")
async def accept_key_skills(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ –∏–∑ –ø–∞–º—è—Ç–∏
    data = await state.get_data()
    text = data["user_resume_text"]

    result = await async_http(
        method="POST",
        url="http://127.0.0.1:8000/resume/extract_skills",
        params={
            "text": text
        }
    )

    skills = result.get("skills", None)

    if skills:
        await callback.message.answer(f"‚ú® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(skills)}")
    else:
        await callback.message.answer("–ù–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§î")

    await state.clear()

@router.callback_query(F.data == "no")
async def decline_key_skills(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–•–æ—Ä–æ—à–æ. –î–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –≤ –Ω–∞—á–∞–ª–æ.")
    await state.clear()
    await user_text(callback.message)

# –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_vacancies = defaultdict(list)

# –∫–æ–º–∞–Ω–¥–∞ /search
@router.message(F.text == "üíº –í–∞–∫–∞–Ω—Å–∏–∏")
@router.message(Command("search"))
async def search_command(message: Message):
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä—ë—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    vacancies = return_vacancies()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–ª—é—á–∞ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
    user_id = message.from_user.id

    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
    user_vacancies[user_id].append(vacancies)

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy_text = "–í–∞–∫–∞–Ω—Å–∏—è #1\t" + vacancies[0]

    await message.answer(
        vacancy_text,
        disable_web_page_preview=True,
        reply_markup=ikb.vacancies(0, len(user_vacancies[user_id])-1)
    )

# –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º
@router.callback_query(F.data.startswith("vacancy:"))
async def navigate_vacancy(callback: CallbackQuery):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –Ω–∞–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    idx, set_number = map(int, callback.data.split(":")[1:])

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    user_id = callback.from_user.id
    vacancy_text = f"–í–∞–∫–∞–Ω—Å–∏—è #{idx + 1}" + user_vacancies[user_id][set_number][idx]

    await callback.message.edit_text(
        vacancy_text,
        disable_web_page_preview=True,
        reply_markup=ikb.vacancies(idx, set_number)
    )
    await callback.answer()

# –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text)
async def user_text(message: Message):
    await message.answer("""–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞:

/resume - –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ä–µ–∑—é–º–µ –∏ —è –ø–æ–¥—Å–∫–∞–∂—É —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.
/search - –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤–º–µ—Å—Ç–µ —Ä–µ—à–∏–º –∫—É–¥–∞ –ª—É—á—à–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.
""", reply_markup=rkb.start())